// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(cuid()) @map("_id")
  kindeId String @unique

  username  String?
  firstName String?
  lastName  String?

  roles         UserRole[] @default([USER])
  email         String?    @unique
  emailVerified DateTime?
  image         String?

  posts BlogPost[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Comment      Comment[]
  BlogPostLike BlogPostLike[]
}

model Category {
  id String @id @default(cuid()) @map("_id")

  label String
  slug  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id String @id @default(cuid()) @map("_id")

  title   String
  slug    String
  summary String?

  category String
  tags     String[]

  featured Boolean    @default(false)
  pinned   Boolean    @default(false)
  status   PostStatus @default(DRAFT)

  sortIndex Int?
  banner    String?
  thumbnail String?

  author   User   @relation(fields: [authorId], references: [kindeId])
  authorId String

  viewsCount    Int? @default(0)
  likesCount    Int? @default(0)
  commentsCount Int? @default(0)

  comments      Comment[]
  blogPostLikes BlogPostLike[]
  views         View[]

  filename    String?
  pathname    String?
  downloadURL String?

  publishedAt DateTime?
  archivedAt  DateTime?

  relatedPosts String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(cuid()) @map("_id")

  BlogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPostLike {
  id String @id @default(cuid()) @map("_id") @db.ObjectId

  BlogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id String @id @default(cuid()) @map("_id")

  BlogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String

  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  GUEST
  USER
  AUTHOR
  ADMIN
}
